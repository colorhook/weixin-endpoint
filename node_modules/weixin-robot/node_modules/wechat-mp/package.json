{
  "name": "wechat-mp",
  "version": "0.2.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/node-webot/wechat-mp.git"
  },
  "description": "Wechat open API utilities.",
  "author": {
    "name": "Jesse Yang",
    "email": "kissmud@gmail.com",
    "url": "https://github.com/ktmud"
  },
  "dependencies": {
    "node-xml-lite": "~0.0.3",
    "lodash-template": "~1.0"
  },
  "devDependencies": {
    "mocha": "*",
    "express": "*",
    "supertest": "*",
    "should": "*"
  },
  "engines": {
    "node": ">=0.6.0",
    "npm": ">=1.1.6"
  },
  "keywords": [
    "weixin",
    "robot",
    "webot",
    "webot-plugin",
    "wechat"
  ],
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "license": "MIT",
  "contributors": [
    {
      "name": "Jesse Yang",
      "email": "jyyjcc@gmail.com"
    }
  ],
  "readme": "# wechat-mp 微信公众平台消息接口中间件 [![Build Status](https://travis-ci.org/ktmud/wechat-mp.png?branch=master)](https://travis-ci.org/ktmud/wechat-mp)\n\nUtilities for wechat offical account messaging API.\n\n校验签名，接受并解析微信消息，处理回复内容为 XML ，并回复给微信。\n\n如需使用自定义菜单等高级接口，可使用 [wechat-api](https://www.npmjs.org/package/wechat-api) 模块。\n\n## Express Middlewares\n\n本模块主要作为 Connect/Express 框架的中间件使用：\n\n```javascript\nvar mp = require('wechat-mp')(process.env.WX_TOKEN);\nvar app = require('express')();\n\napp.use('/wechat', mp.start())\napp.post('/wechat', function(req, res, next) {\n\n  console.log(req.body);\n\n  res.body = {\n    content: 'Hi.'\n    msgType: 'text'\n  };\n\n  next();\n}, mp.end());\n```\n\n如果要在 [koa](http://koajs.com/) 里使用，可尝试 [koa-wechat](https://www.npmjs.org/package/koa-wechat) 模块。\n\n\n### mp( *[options]* )\n\n`options` can be either the token string or an object.\nYou can use these options both when initialization(`mp = require('wechat-mp')(options)`)\nand `mp.start()`.\n\n\n#### options.token\n\nThe token for wechat to check signature.\n\n#### options.tokenProp\n\nDefault: 'wx\\_token'\n\nWill try get `req[tokenProp]` as token. Good for dynamically set token.\n\n#### options.dataProp\n\nDefault: 'body'\n\nWill put parsed data on `req[dataProp]`. So you can access wechat request message via `req.body` or `req.wx_data`, etc.\n\n#### options.session\n\nUnless `options.session` is set to `false`,\nthe `mp.start()` middleware will set `req.sessionID` and `req.sessionId`\nto `\"wx.#{toUserName}.#{fromUserName}\"`.\nSo you can use `req.session` to save information about one specific user.\n\nThe `sessionId` cannot be changed by any other following middlewares.\n\nTo make this work, `mp.start()` must go before express/connect's session middleware.\n\n```\napp.use('/wechat', mp.start())\napp.use(connect.cookieParser())\napp.use(connect.session({ store: ... }))\n```\n\n## weixin-robot\n\n使用 [wexin-robot](https://github.com/node-webot/weixin-robot) 模块，更傻瓜化地定义自动回复功能。\n\n## 调试\n\n使用 [webot-cli](https://github.com/node-webot/webot-cli) 调试发送测试消息。\n\n\n## License\n\nthe MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/node-webot/wechat-mp/issues"
  },
  "_id": "wechat-mp@0.2.2",
  "_from": "wechat-mp@~0.2.2"
}
